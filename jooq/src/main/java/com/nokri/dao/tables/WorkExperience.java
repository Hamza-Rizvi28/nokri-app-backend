/*
 * This file is generated by jOOQ.
 */
package src.main.java.com.nokri.dao.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import src.main.java.com.nokri.dao.Keys;
import src.main.java.com.nokri.dao.Public;
import src.main.java.com.nokri.dao.tables.records.WorkExperienceRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkExperience extends TableImpl<WorkExperienceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.work_experience</code>
     */
    public static final WorkExperience WORK_EXPERIENCE = new WorkExperience();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkExperienceRecord> getRecordType() {
        return WorkExperienceRecord.class;
    }

    /**
     * The column <code>public.work_experience.work_experience_id</code>.
     */
    public final TableField<WorkExperienceRecord, Long> WORK_EXPERIENCE_ID = createField(DSL.name("work_experience_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.work_experience.profile_id</code>.
     */
    public final TableField<WorkExperienceRecord, Long> PROFILE_ID = createField(DSL.name("profile_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.work_experience.from_date</code>.
     */
    public final TableField<WorkExperienceRecord, String> FROM_DATE = createField(DSL.name("from_date"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.work_experience.to_date</code>.
     */
    public final TableField<WorkExperienceRecord, String> TO_DATE = createField(DSL.name("to_date"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.work_experience.organization</code>.
     */
    public final TableField<WorkExperienceRecord, String> ORGANIZATION = createField(DSL.name("organization"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.work_experience.designation</code>.
     */
    public final TableField<WorkExperienceRecord, String> DESIGNATION = createField(DSL.name("designation"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.work_experience.descripton</code>.
     */
    public final TableField<WorkExperienceRecord, String> DESCRIPTON = createField(DSL.name("descripton"), SQLDataType.CLOB, this, "");

    private WorkExperience(Name alias, Table<WorkExperienceRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkExperience(Name alias, Table<WorkExperienceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.work_experience</code> table reference
     */
    public WorkExperience(String alias) {
        this(DSL.name(alias), WORK_EXPERIENCE);
    }

    /**
     * Create an aliased <code>public.work_experience</code> table reference
     */
    public WorkExperience(Name alias) {
        this(alias, WORK_EXPERIENCE);
    }

    /**
     * Create a <code>public.work_experience</code> table reference
     */
    public WorkExperience() {
        this(DSL.name("work_experience"), null);
    }

    public <O extends Record> WorkExperience(Table<O> child, ForeignKey<O, WorkExperienceRecord> key) {
        super(child, key, WORK_EXPERIENCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<WorkExperienceRecord, Long> getIdentity() {
        return (Identity<WorkExperienceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkExperienceRecord> getPrimaryKey() {
        return Keys.WORK_EXPERIENCE_PKEY;
    }

    @Override
    public List<ForeignKey<WorkExperienceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WORK_EXPERIENCE__FK_PROFILE);
    }

    private transient Userprofile _userprofile;

    /**
     * Get the implicit join path to the <code>public.userprofile</code> table.
     */
    public Userprofile userprofile() {
        if (_userprofile == null)
            _userprofile = new Userprofile(this, Keys.WORK_EXPERIENCE__FK_PROFILE);

        return _userprofile;
    }

    @Override
    public WorkExperience as(String alias) {
        return new WorkExperience(DSL.name(alias), this);
    }

    @Override
    public WorkExperience as(Name alias) {
        return new WorkExperience(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkExperience rename(String name) {
        return new WorkExperience(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkExperience rename(Name name) {
        return new WorkExperience(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
