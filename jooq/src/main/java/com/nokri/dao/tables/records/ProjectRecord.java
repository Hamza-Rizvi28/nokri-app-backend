/*
 * This file is generated by jOOQ.
 */
package src.main.java.com.nokri.dao.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import src.main.java.com.nokri.dao.tables.Project;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectRecord extends UpdatableRecordImpl<ProjectRecord> implements Record3<Long, Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.project.project_id</code>.
     */
    public void setProjectId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.project.project_id</code>.
     */
    public Long getProjectId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.project.profile_id</code>.
     */
    public void setProfileId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.project.profile_id</code>.
     */
    public Long getProfileId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.project.descripton</code>.
     */
    public void setDescripton(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.project.descripton</code>.
     */
    public String getDescripton() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Project.PROJECT.PROJECT_ID;
    }

    @Override
    public Field<Long> field2() {
        return Project.PROJECT.PROFILE_ID;
    }

    @Override
    public Field<String> field3() {
        return Project.PROJECT.DESCRIPTON;
    }

    @Override
    public Long component1() {
        return getProjectId();
    }

    @Override
    public Long component2() {
        return getProfileId();
    }

    @Override
    public String component3() {
        return getDescripton();
    }

    @Override
    public Long value1() {
        return getProjectId();
    }

    @Override
    public Long value2() {
        return getProfileId();
    }

    @Override
    public String value3() {
        return getDescripton();
    }

    @Override
    public ProjectRecord value1(Long value) {
        setProjectId(value);
        return this;
    }

    @Override
    public ProjectRecord value2(Long value) {
        setProfileId(value);
        return this;
    }

    @Override
    public ProjectRecord value3(String value) {
        setDescripton(value);
        return this;
    }

    @Override
    public ProjectRecord values(Long value1, Long value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProjectRecord
     */
    public ProjectRecord() {
        super(Project.PROJECT);
    }

    /**
     * Create a detached, initialised ProjectRecord
     */
    public ProjectRecord(Long projectId, Long profileId, String descripton) {
        super(Project.PROJECT);

        setProjectId(projectId);
        setProfileId(profileId);
        setDescripton(descripton);
    }
}
